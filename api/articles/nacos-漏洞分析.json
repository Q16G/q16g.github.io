{"title":"nacos 漏洞分析","uid":"e40a9f40d03bd2b693c032e976c8f9fc","slug":"nacos-漏洞分析","date":"2024-07-21T08:24:22.000Z","updated":"2024-07-21T13:41:26.998Z","comments":true,"path":"api/articles/nacos-漏洞分析.json","keywords":null,"cover":[],"content":"<h1 id=\"nacos-漏洞分析\"><a href=\"#nacos-漏洞分析\" class=\"headerlink\" title=\"nacos 漏洞分析\"></a>nacos 漏洞分析</h1><pre class=\"line-numbers language-none\"><code class=\"language-none\">https:&#x2F;&#x2F;github.com&#x2F;foyaga&#x2F;blog-timeline&#x2F;issues&#x2F;328<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>根据issue，我们跟踪到路由。看到有配置secured注解，是需要<code>nacos</code>或者<code>admin</code>权限的。</p>\n<p><img src=\"https://q16g-image.oss-cn-beijing.aliyuncs.com/1721550534583-394c85c8-8696-4ebb-886a-8d75036e109b.png\" alt=\"img\"></p>\n<p>从<code>ApplicationUtils</code>获取到了一个java Bean，这里看下发现是一个接口，有两个实现类，实现类是根据<code>Conditional</code>注解来生效的，这里看下<a href=\"https://www.cnblogs.com/cxuanBlog/p/10960575.html\">Conditional</a>注解具体是干嘛的。</p>\n<p><img src=\"https://q16g-image.oss-cn-beijing.aliyuncs.com/1721551016088-8afe98e5-3ee9-4e55-b37e-8a46f73733cd.png\" alt=\"img\"></p>\n<p>根据上面的注解得知，其实重点就需要看下<code>match</code>函数，match函数中的两个条件。其实找的就是一个默认的配置项。我们其实可以从配置中看到默认是<code>Standalone</code>。<img src=\"https://q16g-image.oss-cn-beijing.aliyuncs.com/1721552328977-0d0e3834-1633-469d-9343-ece3884ef7ed.png\" alt=\"img\"></p>\n<p>重点分析一下文件上传后做了什么》我们可以先看下这个lamda表达式。重点跟一下<code>dataImport</code>函数。这里其实重点看下就清楚，是将文件中的sql语句转换成list，然后再进行异步调用，异步调用中的我们重点关注一下<code>jdbcTemplate</code>是传入的东西和<code>DoDataImport</code>函数。</p>\n<p><img src=\"https://q16g-image.oss-cn-beijing.aliyuncs.com/1721552412661-63a7a903-cc50-49b0-b04a-0f1edf4a9087.png\" alt=\"img\"></p>\n<h3 id=\"jdbcTemplate来源\"><a href=\"#jdbcTemplate来源\" class=\"headerlink\" title=\"jdbcTemplate来源\"></a>jdbcTemplate来源</h3><p>我们可以看下，这个是在当前类的<code>init</code>函数中传入的。跟下代码可以发现，这里<code>DataSourceService</code>是一个<code>Local</code></p>\n<p><img src=\"https://q16g-image.oss-cn-beijing.aliyuncs.com/1721553198409-a20e9478-75c6-4f41-9a96-1924baa8ac72.png\" alt=\"img\"></p>\n<p><img src=\"https://q16g-image.oss-cn-beijing.aliyuncs.com/1721553198409-a20e9478-75c6-4f41-9a96-1924baa8ac72-20240721214000039.png\"></p>\n<p>其实就是在这里的时候进行了初始化。然后调用reload函数做了一个检查。</p>\n<h3 id=\"DoDataImport函数内部\"><a href=\"#DoDataImport函数内部\" class=\"headerlink\" title=\"DoDataImport函数内部\"></a>DoDataImport函数内部<img src=\"https://q16g-image.oss-cn-beijing.aliyuncs.com/1721553690533-102b66e3-2e32-4f44-8c72-e734846314ee.png\" alt=\"img\"></h3><p>进行了一个Sql的插入和更新。里面还有一些小的细节，如果有需要可以自己进行跟踪。</p>\n<h3 id=\"重点看下derby如何加载jar包\"><a href=\"#重点看下derby如何加载jar包\" class=\"headerlink\" title=\"重点看下derby如何加载jar包\"></a>重点看下derby如何加载jar包</h3><p>这里可以看下官方文档</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">https:&#x2F;&#x2F;db.apache.org&#x2F;derby&#x2F;docs&#x2F;10.17&#x2F;ref&#x2F;index.html<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://q16g-image.oss-cn-beijing.aliyuncs.com/1721568964516-904b0c78-c4c1-4065-9fab-d257e01b834c.png\" alt=\"img\"></p>\n<p>核心原理为：从远程加载jar包，然后创建函数，调用函数执行。整个过程很像mysql-udf。</p>\n","feature":true,"text":"nacos 漏洞分析https:&#x2F;&#x2F;github.com&#x2F;foyaga&#x2F;blog-timeline&#x2F;issues&#x2F;328 根据issue，我们跟踪到路由。看到有配置secured注解，是需要nacos或者admin权限的...","link":"","photos":[],"count_time":{"symbolsCount":811,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"JAVA安全","slug":"JAVA安全","count":5,"path":"api/tags/JAVA安全.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#nacos-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90\"><span class=\"toc-text\">nacos 漏洞分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#jdbcTemplate%E6%9D%A5%E6%BA%90\"><span class=\"toc-text\">jdbcTemplate来源</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DoDataImport%E5%87%BD%E6%95%B0%E5%86%85%E9%83%A8\"><span class=\"toc-text\">DoDataImport函数内部</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%87%8D%E7%82%B9%E7%9C%8B%E4%B8%8Bderby%E5%A6%82%E4%BD%95%E5%8A%A0%E8%BD%BDjar%E5%8C%85\"><span class=\"toc-text\">重点看下derby如何加载jar包</span></a></li></ol></li></ol></li></ol>","author":{"name":"Q16G","slug":"blog-author","avatar":"https://q16g-image.oss-cn-beijing.aliyuncs.com/image-20230925201943513.png","link":"/","description":"一个潜心学习网络安全的大学生","socials":{"github":"https://github.com/Q16G","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_57222016?spm=1018.2226.3001.5343","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"laravel 新链挖掘","uid":"dd03dedaa9adf58cb69c42c6e6d91aa7","slug":"laravel-新链挖掘","date":"2024-06-22T07:31:46.000Z","updated":"2024-06-22T07:57:42.469Z","comments":true,"path":"api/articles/laravel-新链挖掘.json","keywords":null,"cover":[],"text":"环境composer create-project laravel&#x2F;laravel laravel 拉下来之后我们即可在laravel 目录中看到。在routes/web.php中创建一条反序列化路由即可。 挖掘过程（1）首先寻找__destruct 函数，这里追踪到M...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"漏洞挖掘","slug":"漏洞挖掘","count":1,"path":"api/tags/漏洞挖掘.json"}],"author":{"name":"Q16G","slug":"blog-author","avatar":"https://q16g-image.oss-cn-beijing.aliyuncs.com/image-20230925201943513.png","link":"/","description":"一个潜心学习网络安全的大学生","socials":{"github":"https://github.com/Q16G","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_57222016?spm=1018.2226.3001.5343","juejin":"","customs":{}}},"feature":true}}